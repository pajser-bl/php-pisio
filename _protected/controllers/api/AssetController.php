<?php

namespace app\controllers\api;

use app\models\Asset;
use app\models\Transfer;
use app\models\User;
use Yii;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\rest\Controller;
use \app\models\Person;
use yii\web\IdentityInterface;
use yii\web\Response;
use yii\rest\ActiveController;

class AssetController extends ActiveController
{
    public $modelClass = 'app\models\Asset';
    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'items',
    ];

    public function behaviors()
    {

        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => \yii\filters\Cors::className(),
        ];
//        $behaviors['access'] = [
//            'class' => \yii\filters\AccessControl::className(),
//            'rules' => [
//                [
//                    'allow' => true,
//                    'actions' => ['index', 'view', 'apply-transfers'],
//                ],
//                [
//                    'allow' => false
//                ]
//            ]
//        ];

        $behaviors['contentNegotiator'] = [
            'class' => 'yii\filters\ContentNegotiator',
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ]
        ];
//        $behaviors['verbs'] = [
//            'class' => VerbFilter::className(),
//            'actions' => [
//                'index' => ['GET'],
//                'view' => ['GET'],
//            ],
//        ];
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'except' => ['options'],
            'authMethods' => [
                HttpBearerAuth::className(),
            ],
        ];
        return $behaviors;
    }



    public function actionApplyTransfers()
    {
        $due_transfers = Transfer::find()->where(['date' => date('Y-m-d')])->all();
        foreach ($due_transfers as $transfer) {
            if ($asset = Asset::findOne($transfer['asset'])) {
                $asset->setAttributes(
                    [
                        'person_id' => $transfer['person_to'],
                        'location_id' => $transfer['person_to'],
                    ]
                );
                $asset->save();
            }
        }
        return $this->asJson(['apply-transfers' => 'done']);
    }

}
